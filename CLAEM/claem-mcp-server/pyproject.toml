[project]
name = "claem-mcp"
version = "1.0.0"
description = "CLAEM: Claude-AI Enhanced MCP - Revolutionary unified AI collaboration server with human oversight"
authors = [
    {name = "Mattae Cooper", email = "human@mattaecooper.org"},
    {name = "'{ae}'aegntic.ai", email = "contact@aegntic.ai"}
]
readme = "README.md"
license = {text = "Dual License"}
requires-python = ">=3.11"
keywords = ["ai", "mcp", "collaboration", "claude", "gemini", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

dependencies = [
    # Core MCP and async infrastructure
    "mcp>=1.0.0",
    "httpx>=0.27.0",
    "websockets>=12.0",
    "uvloop>=0.19.0; platform_system != 'Windows'",
    
    # Data models and validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database and knowledge graph
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "networkx>=3.2.0",
    "redis>=5.0.0",
    
    # AI providers and orchestration
    "openai>=1.12.0",
    "anthropic>=0.18.0",
    "google-generativeai>=0.4.0",
    "groq>=0.4.0",
    
    # Web interface and real-time features
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "jinja2>=3.1.0",
    "sse-starlette>=1.8.0",
    
    # Utilities and performance
    "rich>=13.7.0",
    "typer>=0.9.0",
    "orjson>=3.9.0",
    "asyncio-throttle>=1.0.2"
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-cov>=4.0.0",
    
    # Browser automation for testing
    "playwright>=1.41.0",
    "selenium>=4.17.0",
    
    # Code quality
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0"
]

performance = [
    "orjson>=3.9.0",
    "ujson>=5.9.0",
    "uvloop>=0.19.0; platform_system != 'Windows'",
    "asyncpg>=0.29.0"
]

enterprise = [
    "psycopg2-binary>=2.9.0",
    "celery>=5.3.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0"
]

[project.urls]
Homepage = "https://github.com/aegntic/CLAEM"
Documentation = "https://docs.aegntic.ai/claem"
Repository = "https://github.com/aegntic/CLAEM"
Issues = "https://github.com/aegntic/CLAEM/issues"

[project.scripts]
claem = "claem_mcp.cli:main"
claem-server = "claem_mcp.server:main"
claem-web = "claem_mcp.web:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/claem_mcp/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/claem_mcp"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
]

ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "ARG001", # unused function argument
    "ARG002", # unused method argument
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "groq.*",
    "google.generativeai.*",
    "redis.*",
    "networkx.*",
    "playwright.*",
    "selenium.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "browser: Browser automation tests"
]

[tool.coverage.run]
source = ["src/claem_mcp"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]