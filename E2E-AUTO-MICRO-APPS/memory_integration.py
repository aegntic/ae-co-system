#!/usr/bin/env python3
"""
Memory-Bank Integration Script for E2E-AUTO-MICRO-APPS

This script provides a direct Python interface to the Memory-Bank module
and integrates it with other components of the system.
"""

import os
import json
import sys
import subprocess
from pathlib import Path
import datetime
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('memory-integration')

# Project paths
PROJECT_ROOT = Path('/home/tabs/E2E-AUTO-MICRO-APPS')
MODULES_DIR = PROJECT_ROOT / 'modules'
MEMORY_BANK_DIR = MODULES_DIR / 'memory-bank'
MEMORY_STORAGE_DIR = PROJECT_ROOT / '.memory'

# Create storage directory if it doesn't exist
MEMORY_STORAGE_DIR.mkdir(parents=True, exist_ok=True)
logger.info(f"Memory storage directory: {MEMORY_STORAGE_DIR}")

class MemoryBankPython:
    """Python wrapper for the Node.js Memory-Bank module"""
    
    def __init__(self):
        """Initialize the MemoryBankPython wrapper"""
        self._verify_module_exists()
        self._create_env_file()
        logger.info("MemoryBankPython initialized successfully")
    
    def _verify_module_exists(self):
        """Verify that the Memory-Bank module exists"""
        if not MEMORY_BANK_DIR.exists():
            logger.error(f"Memory-Bank module not found at: {MEMORY_BANK_DIR}")
            raise FileNotFoundError(f"Memory-Bank module not found at: {MEMORY_BANK_DIR}")
        logger.info(f"Memory-Bank module found at: {MEMORY_BANK_DIR}")
    
    def _create_env_file(self):
        """Create or update .env file with Memory-Bank configuration"""
        env_path = PROJECT_ROOT / '.env'
        env_content = f"""
# Memory-Bank Configuration (Generated by memory_integration.py)
MEMORY_STORAGE_DIR="{MEMORY_STORAGE_DIR}"
VECTOR_DB_ENABLED=false
MAX_MEMORY_AGE_DAYS=30
MEMORY_COMPRESSION_ENABLED=true
"""
        # Append to existing file or create new one
        if env_path.exists():
            current_content = env_path.read_text()
            if "MEMORY_STORAGE_DIR" not in current_content:
                with open(env_path, 'a') as f:
                    f.write(env_content)
                logger.info(f"Updated .env file with Memory-Bank configuration")
        else:
            with open(env_path, 'w') as f:
                f.write(env_content)
            logger.info(f"Created .env file with Memory-Bank configuration")
    
    def _execute_node_script(self, script_content, input_data=None):
        """Execute a Node.js script with Memory-Bank operations"""
        # Create temporary script file
        temp_script_path = PROJECT_ROOT / f"temp_memory_op_{int(datetime.datetime.now().timestamp())}.js"
        
        full_script = f"""
// Temporary script for Memory-Bank operation
const MemoryBank = require('./modules/memory-bank');
const memoryBank = new MemoryBank();

async function run() {{
    try {{
        {script_content}
    }} catch (error) {{
        console.error('Error:', error.message);
        process.exit(1);
    }}
}}

run();
"""
        
        # Write script to file
        with open(temp_script_path, 'w') as f:
            f.write(full_script)
        
        try:
            # Execute script
            if input_data:
                input_json = json.dumps(input_data)
                result = subprocess.run(
                    ['node', str(temp_script_path)],
                    input=input_json.encode(),
                    capture_output=True,
                    text=True
                )
            else:
                result = subprocess.run(
                    ['node', str(temp_script_path)],
                    capture_output=True,
                    text=True
                )
            
            # Process result
            if result.returncode != 0:
                logger.error(f"Script execution failed: {result.stderr}")
                return None
            
            # Parse output as JSON if possible
            try:
                return json.loads(result.stdout)
            except json.JSONDecodeError:
                return result.stdout.strip()
            
        finally:
            # Clean up temporary script
            os.unlink(temp_script_path)
    
    def store(self, category, key, data, metadata=None):
        """Store data in Memory-Bank"""
        metadata = metadata or {}
        script = f"""
        const data = JSON.parse(process.stdin.toString());
        const result = await memoryBank.store(
            '{category}',
            '{key}',
            data.data,
            {{ metadata: data.metadata }}
        );
        console.log(JSON.stringify({{ success: result }}));
        """
        
        return self._execute_node_script(script, {
            'data': data,
            'metadata': metadata
        })
    
    def retrieve(self, category, key):
        """Retrieve data from Memory-Bank"""
        script = f"""
        const data = await memoryBank.retrieve('{category}', '{key}');
        console.log(JSON.stringify(data));
        """
        
        return self._execute_node_script(script)
    
    def list(self, category):
        """List all keys in a category"""
        script = f"""
        const keys = await memoryBank.list('{category}');
        console.log(JSON.stringify(keys));
        """
        
        return self._execute_node_script(script)
    
    def delete(self, category, key):
        """Delete a memory"""
        script = f"""
        const result = await memoryBank.delete('{category}', '{key}');
        console.log(JSON.stringify({{ success: result }}));
        """
        
        return self._execute_node_script(script)

def integrate_with_modules():
    """Create integration points with other modules"""
    modules_to_integrate = [
        'openrouter',
        'task-master',
        'trend-fetcher'
    ]
    
    # Create directory for Python integration modules
    python_integrations_dir = MODULES_DIR / 'python_integrations'
    python_integrations_dir.mkdir(exist_ok=True)
    
    # Create __init__.py
    with open(python_integrations_dir / '__init__.py', 'w') as f:
        f.write('# Python integrations for E2E-AUTO-MICRO-APPS')
    
    # Create memory_bank.py integration module
    memory_bank_py = python_integrations_dir / 'memory_bank.py'
    with open(memory_bank_py, 'w') as f:
        f.write("""
# Memory-Bank Python integration module
import sys
import os
from pathlib import Path

# Add parent directory to path to import memory_integration
sys.path.insert(0, str(Path(__file__).parent.parent.parent))
from memory_integration import MemoryBankPython

# Create singleton instance
memory_bank = MemoryBankPython()

# Export functions
store = memory_bank.store
retrieve = memory_bank.retrieve
list_memories = memory_bank.list
delete = memory_bank.delete
""")
    
    # Create integration modules for each component
    for module in modules_to_integrate:
        # Create snake_case module name
        module_snake = module.replace('-', '_')
        
        # Create integration file
        integration_file = python_integrations_dir / f'{module_snake}_memory.py'
        with open(integration_file, 'w') as f:
            f.write(f"""
# {module} Memory-Bank integration
from . import memory_bank

def store_{module_snake}_data(key, data, metadata=None):
    \"\"\"Store {module} data in Memory-Bank\"\"\"
    return memory_bank.store('{module_snake}', key, data, metadata)

def retrieve_{module_snake}_data(key):
    \"\"\"Retrieve {module} data from Memory-Bank\"\"\"
    return memory_bank.retrieve('{module_snake}', key)

def list_{module_snake}_data():
    \"\"\"List all {module} data keys\"\"\"
    return memory_bank.list('{module_snake}')

def delete_{module_snake}_data(key):
    \"\"\"Delete {module} data\"\"\"
    return memory_bank.delete('{module_snake}', key)
""")
        
        logger.info(f"Created integration module for {module}")
    
    logger.info(f"All integration modules created in {python_integrations_dir}")
    return True

def run_tests():
    """Run basic tests to verify the integration"""
    memory_bank = MemoryBankPython()
    
    # Test data
    test_data = {
        'title': 'Test Memory',
        'description': 'This is a test memory for Python integration',
        'value': 42
    }
    
    # Test store operation
    logger.info("Testing memory storage...")
    store_result = memory_bank.store(
        'test-category',
        'test-key-py-1',
        test_data,
        {'source': 'python-integration', 'tags': ['test', 'python']}
    )
    logger.info(f"Store result: {store_result}")
    
    # Test retrieve operation
    logger.info("Testing memory retrieval...")
    retrieved_data = memory_bank.retrieve('test-category', 'test-key-py-1')
    logger.info(f"Retrieved data: {retrieved_data}")
    
    # Test list operation
    logger.info("Testing memory listing...")
    memory_list = memory_bank.list('test-category')
    logger.info(f"Memory list: {memory_list}")
    
    # Test delete operation
    logger.info("Testing memory deletion...")
    delete_result = memory_bank.delete('test-category', 'test-key-py-1')
    logger.info(f"Delete result: {delete_result}")
    
    # Verify deletion
    after_delete_list = memory_bank.list('test-category')
    logger.info(f"After deletion list: {after_delete_list}")
    
    logger.info("All tests completed!")
    return True

def main():
    """Main entry point for the integration script"""
    logger.info("Starting Memory-Bank Python integration")
    
    # Initialize Memory-Bank Python wrapper
    memory_bank = MemoryBankPython()
    
    # Create integration modules
    integrate_with_modules()
    
    # Run basic tests if requested
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        run_tests()
    
    logger.info("""
╔══════════════════════════════════════════════════════════╗
║                                                          ║
║  Memory-Bank Python Integration Completed Successfully!  ║
║                                                          ║
╚══════════════════════════════════════════════════════════╝

Integration modules created:
- modules/python_integrations/memory_bank.py
- modules/python_integrations/openrouter_memory.py
- modules/python_integrations/task_master_memory.py
- modules/python_integrations/trend_fetcher_memory.py

To use Memory-Bank in your Python code:

from modules.python_integrations import memory_bank

# Store data
memory_bank.store('category', 'key', data, metadata)

# Retrieve data
data = memory_bank.retrieve('category', 'key')

# List keys
keys = memory_bank.list('category')

# Delete data
memory_bank.delete('category', 'key')
""")

if __name__ == "__main__":
    main()
