{
  "data": {
    "libraryId": "facebook/react",
    "topic": "hooks",
    "content": "\n# React Hooks Documentation\n\n## Overview\n\nReact Hooks are functions that let you \"hook into\" React state and lifecycle features from function components.\nHooks allow you to reuse stateful logic without changing your component hierarchy.\n\n## Basic Hooks\n\n### useState\n\n```javascript\nconst [state, setState] = useState(initialState);\n```\n\n- Returns a stateful value and a function to update it\n- The update function can accept a new value or a function that returns a new value based on the previous one\n\n### useEffect\n\n```javascript\nuseEffect(() => {\n  // Side effects code\n  return () => {\n    // Clean up code\n  };\n}, [dependencies]);\n```\n\n- Performs side effects in function components\n- Runs after every render by default, or when dependencies change\n- Optional cleanup function can be returned\n\n### useContext\n\n```javascript\nconst value = useContext(MyContext);\n```\n\n- Accepts a context object and returns the current context value\n- Always re-renders when the context value changes\n\n## Additional Hooks\n\n### useReducer\n\n```javascript\nconst [state, dispatch] = useReducer(reducer, initialArg, init);\n```\n\n- Alternative to useState for complex state logic\n- Preferred when state transitions depend on the previous state\n\n### useCallback\n\n```javascript\nconst memoizedCallback = useCallback(() => {\n  doSomething(a, b);\n}, [a, b]);\n```\n\n- Returns a memoized callback function\n- Only changes if one of the dependencies has changed\n\n### useMemo\n\n```javascript\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n- Returns a memoized value\n- Only recomputes the value when one of the dependencies has changed\n\n### useRef\n\n```javascript\nconst refContainer = useRef(initialValue);\n```\n\n- Returns a mutable ref object\n- The .current property is initialized to the passed argument\n- Persists for the full lifetime of the component\n\n### useId\n\n```javascript\nconst id = useId();\n```\n\n- Generates a unique ID for accessibility attributes\n- New in React 18\n\n### useTransition\n\n```javascript\nconst [isPending, startTransition] = useTransition();\n```\n\n- Marks updates as transitions to avoid blocking the UI\n- New in React 18\n\n### useDeferredValue\n\n```javascript\nconst deferredValue = useDeferredValue(value);\n```\n\n- Defers updating a part of the UI\n- New in React 18\n\n## Rules of Hooks\n\n1. Only call hooks at the top level\n2. Only call hooks from React function components or custom hooks\n3. Name custom hooks starting with \"use\"\n\n## Custom Hooks\n\nYou can create your own hooks to reuse stateful logic between different components:\n\n```javascript\nfunction useCustomHook(initialValue) {\n  const [value, setValue] = useState(initialValue);\n  \n  useEffect(() => {\n    // Custom side effects\n  }, [value]);\n  \n  return { value, setValue };\n}\n```\n",
    "timestamp": "2025-05-05T06:29:44.678Z"
  },
  "metadata": {
    "timestamp": "2025-05-05T06:29:44.678Z",
    "category": "documentation",
    "key": "lib_facebook_react_hooks",
    "source": "context7"
  }
}