name: 4site.pro Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - quick
          - performance
          - security
          - viral
      environment:
        description: 'Test environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  TEST_TIMEOUT: 300000
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  # Pre-flight checks and setup
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.check.outputs.should-run }}
      test-type: ${{ steps.config.outputs.test-type }}
      environment: ${{ steps.config.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '4site-pro/project4site_-github-readme-to-site-generator/package-lock.json'

      - name: Check if tests should run
        id: check
        run: |
          # Always run on main branch, PRs, and manual triggers
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.event_name }}" == "pull_request" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            # Check if test-related files changed
            if git diff --name-only HEAD~1 | grep -E "(test|spec|\.test\.|\.spec\.)" > /dev/null; then
              echo "should-run=true" >> $GITHUB_OUTPUT
            else
              echo "should-run=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Configure test parameters
        id: config
        run: |
          TEST_TYPE="${{ github.event.inputs.test_type || 'all' }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          # Use quick tests for draft PRs
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            TEST_TYPE="quick"
          fi
          
          echo "test-type=$TEST_TYPE" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  # Main test execution
  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true'
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        test-module: 
          - functional
          - performance
          - security
          - user-journey
          - load
          - viral-mechanics
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '4site-pro/project4site_-github-readme-to-site-generator/package-lock.json'

      - name: Install dependencies
        working-directory: 4site-pro/project4site_-github-readme-to-site-generator
        run: npm ci

      - name: Setup test environment
        working-directory: 4site-pro/project4site_-github-readme-to-site-generator
        run: |
          # Create test environment file
          cat > .env.local << EOF
          NODE_ENV=test
          VITE_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          EOF
          
          # Create test results directory
          mkdir -p test-results

      - name: Start application server
        working-directory: 4site-pro/project4site_-github-readme-to-site-generator
        run: |
          # Start the application in background
          npm run dev &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -s http://localhost:5173 > /dev/null; then
              echo "✅ Application server is ready"
              break
            fi
            echo "⏳ Waiting for application server... ($i/30)"
            sleep 2
          done

      - name: Run test module - ${{ matrix.test-module }}
        working-directory: 4site-pro/project4site_-github-readme-to-site-generator
        env:
          CI: true
          HEADLESS: true
          TEST_ENVIRONMENT: ${{ needs.preflight.outputs.environment }}
          TEST_BASE_URL: http://localhost:5173
          PARALLEL_TESTS: false
          MAX_RETRIES: 2
        run: |
          case "${{ matrix.test-module }}" in
            "functional")
              node test-suite/functional-tests.js
              ;;
            "performance")
              node test-suite/performance-tests.js
              ;;
            "security")
              node test-suite/security-tests.js
              ;;
            "user-journey")
              node test-suite/user-journey-tests.js
              ;;
            "load")
              node test-suite/load-tests.js
              ;;
            "viral-mechanics")
              node test-suite/viral-mechanics-tests.js
              ;;
          esac

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-module }}
          path: 4site-pro/project4site_-github-readme-to-site-generator/test-results/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        if: always()
        run: |
          # Kill application server
          if [[ -n "$APP_PID" ]]; then
            kill $APP_PID 2>/dev/null || true
          fi
          
          # Kill any remaining processes
          pkill -f "node.*vite" || true
          pkill -f "chromium" || true

  # Comprehensive report generation
  report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [preflight, test]
    if: always() && needs.preflight.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '4site-pro/project4site_-github-readme-to-site-generator/package-lock.json'

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Install dependencies
        working-directory: 4site-pro/project4site_-github-readme-to-site-generator
        run: npm ci

      - name: Generate comprehensive report
        working-directory: 4site-pro/project4site_-github-readme-to-site-generator
        env:
          CI: true
          TEST_ENVIRONMENT: ${{ needs.preflight.outputs.environment }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          # Aggregate all test results
          mkdir -p test-results
          find ../../../test-artifacts -name "*.json" -exec cp {} test-results/ \; 2>/dev/null || true
          find ../../../test-artifacts -name "*.png" -exec cp {} test-results/ \; 2>/dev/null || true
          
          # Generate comprehensive report
          node test-suite/report-generator.js

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: |
            4site-pro/project4site_-github-readme-to-site-generator/test-results/comprehensive-test-report.html
            4site-pro/project4site_-github-readme-to-site-generator/test-results/comprehensive-test-report.json
            4site-pro/project4site_-github-readme-to-site-generator/test-results/executive-summary.md
            4site-pro/project4site_-github-readme-to-site-generator/test-results/ci-report.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '4site-pro/project4site_-github-readme-to-site-generator/test-results/ci-report.json';
            
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const emoji = report.success ? '✅' : '❌';
              const status = report.success ? 'Success' : 'Failed';
              const passRate = ((report.tests.passed / report.tests.total) * 100).toFixed(1);
              
              const comment = `
              ## ${emoji} Test Results - ${status}
              
              **Summary:** ${report.tests.passed}/${report.tests.total} tests passed (${passRate}%)
              
              ### Performance
              - Score: ${report.performance.score}/100
              - Meets Targets: ${report.performance.meetsTargets ? '✅' : '❌'}
              
              ### Security
              - Score: ${report.security.score}/100
              - Vulnerabilities: ${report.security.vulnerabilities}
              - Risk Level: ${report.security.riskLevel.toUpperCase()}
              
              ### Issues
              - Critical Issues: ${report.criticalIssues}
              - Recommendations: ${report.recommendations}
              
              [View detailed report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [preflight, test, report]
    if: always() && needs.preflight.outputs.should-run-tests == 'true'
    
    steps:
      - name: Download CI report
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-test-report
          path: ./reports

      - name: Send Slack notification
        if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ -n "$SLACK_WEBHOOK_URL" && -f "reports/ci-report.json" ]]; then
            REPORT=$(cat reports/ci-report.json)
            SUCCESS=$(echo "$REPORT" | jq -r '.success')
            PASS_RATE=$(echo "$REPORT" | jq -r '(.tests.passed / .tests.total * 100)')
            
            if [[ "$SUCCESS" == "true" ]]; then
              EMOJI="🎉"
              COLOR="good"
              STATUS="Success"
            else
              EMOJI="🚨"
              COLOR="danger"
              STATUS="Failed"
            fi
            
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"text\":\"$EMOJI 4site.pro Tests - $STATUS\",
                \"attachments\":[{
                  \"color\":\"$COLOR\",
                  \"fields\":[
                    {\"title\":\"Pass Rate\",\"value\":\"${PASS_RATE}%\",\"short\":true},
                    {\"title\":\"Environment\",\"value\":\"${{ needs.preflight.outputs.environment }}\",\"short\":true},
                    {\"title\":\"Branch\",\"value\":\"${{ github.ref_name }}\",\"short\":true},
                    {\"title\":\"Commit\",\"value\":\"${GITHUB_SHA:0:7}\",\"short\":true}
                  ]
                }]
              }" \
              "$SLACK_WEBHOOK_URL"
          fi

      - name: Set build status
        if: always()
        run: |
          if [[ -f "reports/ci-report.json" ]]; then
            SUCCESS=$(cat reports/ci-report.json | jq -r '.success')
            CRITICAL=$(cat reports/ci-report.json | jq -r '.criticalIssues')
            
            if [[ "$SUCCESS" != "true" || "$CRITICAL" -gt "0" ]]; then
              echo "❌ Build failed due to test failures or critical issues"
              exit 1
            else
              echo "✅ Build passed all quality gates"
            fi
          else
            echo "❌ No CI report found - assuming failure"
            exit 1
          fi