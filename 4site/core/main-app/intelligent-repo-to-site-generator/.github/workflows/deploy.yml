name: Deploy project4site to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Type checking
        run: npm run type-check
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          # Core API Keys (Required)
          VITE_GEMINI_API_KEY: ${{ secrets.VITE_GEMINI_API_KEY }}
          VITE_OPENROUTER_API_KEY: ${{ secrets.VITE_OPENROUTER_API_KEY }}
          
          # Supabase Configuration (Required)
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
          # GitHub Integration (Optional but recommended)
          VITE_GITHUB_TOKEN: ${{ secrets.VITE_GITHUB_TOKEN }}
          
          # Feature Flags
          ENABLE_VIRAL_SCORING: true
          ENABLE_AUTO_FEATURING: true
          ENABLE_COMMISSION_SYSTEM: true
          ENABLE_PRO_SHOWCASE: true
          ENABLE_SHARE_TRACKING: true
          
          # Application Settings
          NODE_ENV: production
          VITE_APP_URL: ${{ secrets.VITE_APP_URL || 'https://project4site.github.io' }}
          VITE_API_TIMEOUT: 30000
          VITE_ENABLE_ANALYTICS: true

      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Health check job (runs after build)
  health-check:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run health checks
        run: |
          echo "🔍 Running system health checks..."
          
          # Check if Gemini API is accessible
          if [ -n "${{ secrets.VITE_GEMINI_API_KEY }}" ]; then
            echo "✅ Gemini API key configured"
          else
            echo "⚠️ Gemini API key not configured"
          fi
          
          # Check if Supabase is configured
          if [ -n "${{ secrets.VITE_SUPABASE_URL }}" ] && [ -n "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            echo "✅ Supabase configuration found"
          else
            echo "⚠️ Supabase configuration incomplete"
          fi
          
          # Verify build output exists
          if [ -d "./dist" ]; then
            echo "✅ Build output verified"
            echo "📊 Build size: $(du -sh ./dist | cut -f1)"
          else
            echo "❌ Build output not found"
            exit 1
          fi
          
          echo "🎉 Health checks completed successfully!"

  # Deployment job (only runs on main/master branch)
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, health-check]
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment verification
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "⏰ Deployed at: $(date)"
          
          # Wait for deployment to be accessible
          echo "🔄 Waiting for site to be accessible..."
          sleep 30
          
          # Verify site is responding (basic check)
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Site is responding successfully"
          else
            echo "⚠️ Site might not be fully accessible yet (this is normal for first deployments)"
          fi

  # Notification job (runs after deployment, success or failure)
  notify:
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    needs: [build, health-check, deploy]
    
    steps:
      - name: Deployment status notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment succeeded!"
            echo "📝 Summary:"
            echo "  - Branch: ${{ github.ref_name }}"
            echo "  - Commit: ${{ github.sha }}"
            echo "  - Author: ${{ github.actor }}"
            echo "  - Status: ✅ SUCCESS"
          else
            echo "❌ Deployment failed!"
            echo "📝 Summary:"
            echo "  - Branch: ${{ github.ref_name }}"
            echo "  - Commit: ${{ github.sha }}"
            echo "  - Author: ${{ github.actor }}"
            echo "  - Status: ❌ FAILED"
            echo "  - Check the logs above for details"
          fi