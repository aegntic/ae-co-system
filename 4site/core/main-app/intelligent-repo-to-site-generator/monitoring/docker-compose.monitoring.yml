version: '3.8'

services:
  # Monitoring Dashboard
  monitoring-dashboard:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: 4site-monitoring-dashboard
    restart: unless-stopped
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=production
      - DASHBOARD_PORT=3333
      - DASHBOARD_ACCESS_TOKEN=${DASHBOARD_ACCESS_TOKEN:-dashboard-token-2024}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-4site_pro}
      - DB_USERNAME=${DB_USERNAME:-4site_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Alert configurations
      - ALERT_EMAIL_ENABLED=true
      - ALERT_EMAIL_RECIPIENTS=${ALERT_EMAIL_RECIPIENTS}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM:-alerts@4site.pro}
      # Slack integration
      - ALERT_SLACK_ENABLED=${ALERT_SLACK_ENABLED:-false}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SLACK_ALERT_CHANNEL=${SLACK_ALERT_CHANNEL:-#alerts}
      # PagerDuty integration
      - PAGERDUTY_ENABLED=${PAGERDUTY_ENABLED:-false}
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}
      # Sentry integration
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}
      # DataDog integration
      - DATADOG_API_KEY=${DATADOG_API_KEY}
      - DATADOG_APPLICATION_KEY=${DATADOG_APPLICATION_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - monitoring_logs:/app/logs
      - ./monitoring/config:/app/config:ro
    networks:
      - monitoring-network
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: 4site-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: 4site-grafana
    restart: unless-stopped
    ports:
      - "3334:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}:${SMTP_PORT:-587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASS}
      - GF_SMTP_FROM_ADDRESS=${ALERT_EMAIL_FROM:-alerts@4site.pro}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/config/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: 4site-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./monitoring/config/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: 4site-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: 4site-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: 4site-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP thrift collector
      - "6831:6831/udp"  # Jaeger agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.8.0
    container_name: 4site-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/config/loki:/etc/loki:ro
      - loki_data:/loki
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:2.8.0
    container_name: 4site-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/config/promtail:/etc/promtail:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - monitoring_logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monitoring-network

  # Lighthouse CI for performance monitoring
  lighthouse-ci:
    image: patrickhulce/lhci-server:0.12.0
    container_name: 4site-lighthouse
    restart: unless-stopped
    ports:
      - "9001:9001"
    environment:
      - LHCI_GITHUB_APP_TOKEN=${GITHUB_TOKEN}
      - LHCI_GITHUB_STATUS_CONTEXT=lighthouse
    volumes:
      - lighthouse_data:/data
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9001/"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Security scanning with Trivy
  trivy-server:
    image: aquasec/trivy:0.43.0
    container_name: 4site-trivy
    restart: unless-stopped
    ports:
      - "4954:4954"
    command: ["server", "--listen", "0.0.0.0:4954"]
    volumes:
      - trivy_cache:/root/.cache
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "trivy", "version"]
      interval: 60s
      timeout: 30s
      retries: 3

networks:
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  app-network:
    external: true

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  lighthouse_data:
    driver: local
  trivy_cache:
    driver: local
  monitoring_logs:
    driver: local