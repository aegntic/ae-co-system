{"version":3,"file":"animation-vendor-BahRI7E1.js","sources":["../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/utils/use-constant.mjs","../../node_modules/framer-motion/dist/es/utils/is-browser.mjs","../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","../../node_modules/framer-motion/dist/es/context/PresenceContext.mjs","../../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../../node_modules/framer-motion/dist/es/context/LazyContext.mjs","../../node_modules/framer-motion/dist/es/motion/features/definitions.mjs","../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","../../node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","../../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","../../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","../../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/load-features.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/html/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/html/config-motion.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","../../node_modules/framer-motion/dist/es/render/components/create-factory.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","../../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","../../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../../node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../../node_modules/framer-motion/dist/es/events/event-info.mjs","../../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../../node_modules/framer-motion/dist/es/utils/get-context-window.mjs","../../node_modules/framer-motion/dist/es/utils/distance.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../../node_modules/framer-motion/dist/es/projection/node/state.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../../node_modules/framer-motion/dist/es/utils/delay.mjs","../../node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../../node_modules/framer-motion/dist/es/gestures/hover.mjs","../../node_modules/framer-motion/dist/es/gestures/press.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../../node_modules/framer-motion/dist/es/gestures/focus.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../../node_modules/framer-motion/dist/es/render/store.mjs","../../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/create.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = \n/* @__PURE__ */ createContext(null);\n\nexport { PresenceContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { isHTMLElement } from 'motion-dom';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const parent = element.offsetParent;\n            const parentWidth = isHTMLElement(parent)\n                ? parent.offsetWidth || 0\n                : 0;\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n            size.right = parentWidth - size.width - size.left;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent, anchorX }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left, right } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        const x = anchorX === \"left\" ? `left: ${left}` : `right: ${right}`;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            ${x}px !important;\n            top: ${top}px !important;\n          }\n        `);\n        }\n        return () => {\n            if (document.head.contains(style)) {\n                document.head.removeChild(style);\n            }\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    let isReusedContext = true;\n    let context = useMemo(() => {\n        isReusedContext = false;\n        return {\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId) => {\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()) {\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId) => {\n                presenceChildren.set(childId, false);\n                return () => presenceChildren.delete(childId);\n            },\n        };\n    }, [isPresent, presenceChildren, onExitComplete]);\n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    if (presenceAffectsLayout && isReusedContext) {\n        context = { ...context };\n    }\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = (jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, children: children }));\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return null;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender?.();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && safeToRemove?.();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { warnOnce } from 'motion-utils';\n\nfunction createDOMMotionComponentProxy(componentFactory) {\n    if (typeof Proxy === \"undefined\") {\n        return componentFactory;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const deprecatedFactoryFunction = (...args) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return componentFactory(...args);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return componentFactory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, componentFactory(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createDOMMotionComponentProxy };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = /* @__PURE__ */ createContext({});\n\nexport { MotionContext };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","import { microtask } from 'motion-dom';\nimport { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !window.MotionHandoffIsComplete?.(optimisedAppearId) &&\n        window.MotionHasOptimisedAnimation?.(optimisedAppearId));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                window.MotionHandoffMarkAsComplete?.(optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, layoutCrossfade, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        crossfade: layoutCrossfade,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { warning, invariant } from 'motion-utils';\nimport { forwardRef, useContext } from 'react';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));\n    }\n    MotionComponent.displayName = `motion.${typeof Component === \"string\"\n        ? Component\n        : `create(${Component.displayName ?? Component.name ?? \"\"})`}`;\n    const ForwardRefMotionComponent = forwardRef(MotionComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage)\n            : invariant(false, strictMessage);\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: drag?.isEnabled(props) || layout?.isEnabled(props)\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createRendererMotionComponent };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { isCSSVariableName } from 'motion-dom';\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    for (const key in correctors) {\n        scaleCorrectors[key] = correctors[key];\n        if (isCSSVariableName(key)) {\n            scaleCorrectors[key].isCSSVariable = true;\n        }\n    }\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { transformProps } from 'motion-dom';\nimport { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { isMotionValue } from 'motion-dom';\nimport { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","import { px } from 'motion-dom';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate, styleProp) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = styleProp?.transformBox ?? \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate, props.style);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","import { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement?.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { isMotionValue } from 'motion-dom';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    return isMotionValue(value) ? value.get() : value;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { isMotionValue } from 'motion-dom';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            visualElement?.getValue(key)?.liveStyle !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isMotionValue, transformPropOrder } from 'motion-dom';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n    }),\n};\n\nexport { svgMotionConfig };\n","import { createRendererMotionComponent } from '../../motion/index.mjs';\nimport { createUseRender } from '../dom/use-render.mjs';\nimport { isSVGComponent } from '../dom/utils/is-svg-component.mjs';\nimport { htmlMotionConfig } from '../html/config-motion.mjs';\nimport { svgMotionConfig } from '../svg/config-motion.mjs';\n\nfunction createMotionComponentFactory(preloadedFeatures, createVisualElement) {\n    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {\n        const baseConfig = isSVGComponent(Component)\n            ? svgMotionConfig\n            : htmlMotionConfig;\n        const config = {\n            ...baseConfig,\n            preloadedFeatures,\n            useRender: createUseRender(forwardMotionProps),\n            createVisualElement,\n            Component,\n        };\n        return createRendererMotionComponent(config);\n    };\n}\n\nexport { createMotionComponentFactory };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { motionValue } from 'motion-dom';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction resolveFinalValueInKeyframes(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { MotionGlobalConfig } from 'motion-utils';\nimport { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n    else if (!willChange && MotionGlobalConfig.WillChange) {\n        const newWillChange = new MotionGlobalConfig.WillChange(\"auto\");\n        visualElement.addValue(\"willChange\", newWillChange);\n        newWillChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { isMotionValue } from 'motion-dom';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from 'motion-dom';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { getValueTransition, frame, JSAnimation, AsyncMotionValueAnimation } from 'motion-dom';\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unique transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        Object.assign(options, getDefaultTransition(name, options));\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    options.duration && (options.duration = secondsToMilliseconds(options.duration));\n    options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));\n    /**\n     * Support deprecated way to set initial value. Prefer keyframe syntax.\n     */\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (MotionGlobalConfig.instantAnimations ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If the transition type or easing has been explicitly set by the user\n     * then we don't want to allow flattening the animation.\n     */\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            return;\n        }\n    }\n    return valueTransition.isSync\n        ? new JSAnimation(options)\n        : new AsyncMotionValueAnimation(options);\n};\n\nexport { animateMotionValue };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { getValueTransition, frame, positionalKeys } from 'motion-dom';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If the value is already at the defined target, skip the animation.\n         */\n        const currentValue = value.get();\n        if (currentValue !== undefined &&\n            !value.isAnimating &&\n            !Array.isArray(valueTarget) &&\n            valueTarget === currentValue &&\n            !valueTransition.velocity) {\n            continue;\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? visualElement.presenceContext?.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? visualElement.presenceContext?.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            /**\n             * If the initial prop contains a transition we can use that, otherwise\n             * allow the animation function to use the visual element's default.\n             */\n            if (typeof props.initial !== \"boolean\") {\n                const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial)\n                    ? props.initial[0]\n                    : props.initial);\n                if (initialTransition && initialTransition.transition) {\n                    fallbackAnimation.transition = initialTransition.transition;\n                }\n            }\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget ?? null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        visualElement.variantChildren?.forEach((child) => child.animationState?.setActive(type, isActive));\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => {\n                onExitComplete(this.id);\n            });\n        }\n    }\n    mount() {\n        const { register, onExitComplete } = this.node.presenceContext || {};\n        if (onExitComplete) {\n            onExitComplete(this.id);\n        }\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        this.node.animationState.reset();\n        this.unmountControls?.();\n    }\n}\n\nexport { AnimationFeature };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { isPrimaryPointer } from 'motion-dom';\n\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY,\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","import { mixNumber } from 'motion-dom';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from 'motion-dom';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { frame, isPrimaryPointer, cancelFrame, frameData } from 'motion-dom';\nimport { pipe, secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from 'motion-dom';\nimport { progress, clamp } from 'motion-utils';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { frame, mixNumber, setDragLock, percent } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from 'motion-dom';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { complex, mixNumber } from 'motion-dom';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { frame, microtask } from 'motion-dom';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const { projection } = visualElement;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from 'motion-utils';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { mixNumber, percent, px } from 'motion-dom';\nimport { progress, circOut, noop } from 'motion-utils';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, lead.opacity ?? 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity ?? 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity ?? 1, lead.opacity ?? 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { percent, mixNumber } from 'motion-dom';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","import { statsBuffer, isSVGElement, isSVGSVGElement, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, frame, activeAnimations, motionValue, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    velocity: 0,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        styles[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { time, frame, cancelFrame } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.setup(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","import { isMotionValue, motionValue } from 'motion-dom';\nimport { animateMotionValue } from '../interfaces/motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = latestTransform?.z || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { hover, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onHover\" + lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = hover(current, (_element, startEvent) => {\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { pipe } from 'motion-utils';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { KeyframeResolver, time, frame, isMotionValue, cancelFrame, transformProps, motionValue, findValueType, complex, getAnimatableNone } from 'motion-dom';\nimport { warnOnce, isNumericalString, isZeroValueString, SubscriptionManager } from 'motion-utils';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.getBaseTargetFromProps(this.props, key) ??\n                this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isMotionValue, motionValue } from 'motion-dom';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { DOMKeyframesResolver, isMotionValue } from 'motion-dom';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current) {\n                    this.current.textContent = `${latest}`;\n                }\n            });\n        }\n    }\n}\n\nexport { DOMVisualElement };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","import { transformProps, defaultTransformValue, readTransformValue, isCSSVariableName } from 'motion-dom';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            return this.projection?.isProjecting\n                ? defaultTransformValue(key)\n                : readTransformValue(instance, key);\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { transformProps, getDefaultValueType } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { createDOMMotionComponentProxy } from '../create-proxy.mjs';\nimport { createMotionComponent } from './create.mjs';\n\nconst motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);\n\nexport { motion };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\nimport { createMotionComponentFactory } from '../create-factory.mjs';\nimport { createDomVisualElement } from '../../dom/create-visual-element.mjs';\n\nconst createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n}, createDomVisualElement);\n\nexport { createMotionComponent };\n"],"names":["LayoutGroupContext","createContext","useConstant","init","ref","useRef","current","isBrowser","window","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","PresenceContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PopChildMeasure","React.Component","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","isPresent","parent","offsetParent","parentWidth","isHTMLElement","offsetWidth","size","sizeRef","height","offsetHeight","width","top","offsetTop","left","offsetLeft","right","componentDidUpdate","render","children","PopChild","anchorX","id","useId","nonce","useContext","useInsertionEffect","x","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","contains","removeChild","jsx","React.cloneElement","cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","isReusedContext","context","useMemo","childId","set","isComplete","values","register","delete","forEach","_","key","React.useEffect","Provider","value","Map","usePresence","subscribe","safeToRemove","useCallback","getChildKey","child","onlyElements","filtered","Children","isValidElement","push","AnimatePresence","propagate","isParentPresent","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","i","length","includes","get","join","exitingChildren","nextChildren","splice","forceRender","Fragment","has","isEveryExitComplete","isExitComplete","LazyContext","strict","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","some","name","validMotionProps","Set","isValidMotionProp","startsWith","shouldForward","isValidProp","require","default","createDOMMotionComponentProxy","componentFactory","Proxy","componentCache","args","_target","MotionContext","isAnimationControls","v","start","isVariantLabel","Array","isArray","variantPriorityOrder","variantProps","isControllingVariants","animate","isVariantNode","Boolean","variants","useCreateMotionContext","undefined","inherit","getCurrentTreeVariants","variantLabelsAsDependency","prop","motionComponentSymbol","Symbol","for","isRefObject","Object","prototype","hasOwnProperty","call","useMotionRef","visualState","visualElement","externalRef","instance","onMount","mount","unmount","camelToDash","str","replace","toLowerCase","optimizedAppearDataAttribute","SwitchLayoutGroupContext","useVisualElement","Component","createVisualElement","ProjectionNodeConstructor","lazyContext","presenceContext","reducedMotionConfig","visualElementRef","renderer","blockInitialAnimation","initialLayoutGroupConfig","projection","type","initialPromotionConfig","layoutId","dragConstraints","layoutScroll","layoutRoot","layoutCrossfade","latestValues","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","crossfade","createProjectionNode","isMounted","update","optimisedAppearId","wantsHandoff","MotionHandoffIsComplete","MotionHasOptimisedAnimation","MotionIsMounted","updateFeatures","microtask","animationState","animateChanges","queueMicrotask","MotionHandoffMarkAsComplete","options","allowProjection","createRendererMotionComponent","preloadedFeatures","useRender","useVisualState","MotionComponent","MeasureLayout","configAndProps","useLayoutId","layoutProjection","combined","ProjectionNode","getProjectionFunctionality","jsxs","features","loadFeatures","displayName","ForwardRefMotionComponent","forwardRef","layoutGroupId","scaleCorrectors","isForcedMotionValue","transformProps","translateAlias","y","z","transformPerspective","numTransforms","transformPropOrder","buildHTMLStyles","state","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","isCSSVariableName","valueAsType","getValueAsType","numberValueTypes","transform","transformString","transformIsDefault","valueIsDefault","parseFloat","trim","buildTransform","originX","originY","originZ","createHtmlRenderState","copyRawValuesOnly","target","source","isMotionValue","useStyle","assign","useInitialMotionValues","useHTMLProps","htmlProps","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","dashKeys","offset","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","styleProp","viewBox","attrs","transformBox","scale","spacing","useDashCase","keys","px","buildSVGPath","createSvgRenderState","tag","useSVGProps","_isStatic","visualProps","rawStyles","lowercaseSVGElements","isSVGComponent","indexOf","test","createUseRender","forwardMotionProps","filteredProps","isDom","filterProps","elementProps","getValueState","getVelocity","resolveVariantFromProps","definition","velocity","resolveMotionValue","makeUseVisualState","config","make","scrapeMotionValuesFromProps","createRenderState","makeLatestValues","renderState","makeState","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","newValues","getValue","liveStyle","htmlMotionConfig","scrapeMotionValuesFromProps$1","charAt","toUpperCase","substring","svgMotionConfig","createMotionComponentFactory","resolveVariant","getProps","isKeyframesTarget","setMotionValue","hasValue","addValue","motionValue","resolveFinalValueInKeyframes","addValueToWillChange","willChange","add","MotionGlobalConfig","WillChange","newWillChange","getOptimisedAppearId","isNotNull","underDampedSpring","stiffness","damping","restSpeed","keyframesTransition","duration","ease","getDefaultTransition","valueKey","keyframes","Math","sqrt","animateMotionValue","isHandoff","onComplete","valueTransition","getValueTransition","delay","elapsed","secondsToMilliseconds","onUpdate","when","_delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from","isTransitionDefined","shouldSkip","instantAnimations","skipAnimations","allowFlatten","finalKeyframe","resolvedKeyframes","filter","getFinalKeyframe","frame","isSync","JSAnimation","AsyncMotionValueAnimation","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","animateTarget","targetAndTransition","transitionOverride","animations","animationTypeState","getState","currentValue","isAnimating","MotionHandoffAnimation","appearId","startTime","shouldReduceMotion","positionalKeys","Promise","all","then","setTarget","animateVariant","variant","getAnimation","resolve","getChildAnimations","variantChildren","forwardDelay","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","notify","animateChildren","first","last","a","b","sortNodePosition","shallowCompare","next","prev","prevLength","numVariantProps","getVariantContext","reversePriorityOrder","reverse","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createState","buildResolvedTypeValues","acc","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","Infinity","typeState","propIsVariant","activeDelta","isActive","isInherited","manuallyAnimateOnMount","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","valueHasChanged","fallbackAnimation","initialTransition","fallbackTarget","getBaseTarget","shouldAnimate","setActive","setAnimateFunction","makeAnimator","reset","createTypeState","whileInView","whileHover","whileDrag","whileFocus","Feature","constructor","node","super","updateAnimationControlsSubscription","unmountControls","prevAnimate","arguments","prevIsPresent","prevPresenceContext","exitAnimation","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","extractEventInfo","event","point","pageX","pageY","addPointerEvent","isPrimaryPointer","addPointerInfo","convertBoundingBoxToBox","bottom","min","max","calcLength","axis","calcAxisDelta","delta","origin","originPoint","mixNumber","translate","isNaN","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","createBox","eachAxis","callback","isIdentityScale","hasScale","scaleX","scaleY","has2DTranslate","rotate","rotateX","rotateY","skewX","skewY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","TREE_SCALE_SNAP_MIN","TREE_SCALE_SNAP_MAX","translateAxis","distance","transformAxis","axisTranslate","axisScale","axisOrigin","measureViewportBox","transformPoint","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","getContextWindow","ownerDocument","defaultView","abs","PanSession","handlers","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","distance2D","timestamp","frameData","onStart","onMove","handlePointerMove","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","pipe","updateHandlers","cancelFrame","subtractPoint","lastDevicePoint","startDevicePoint","timeDelta","timestampedPoint","lastPoint","time","millisecondsToSeconds","currentVelocity","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","elementDragControls","WeakMap","VisualElementDragControls","openDragLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","setDragLock","resolveConstraints","isAnimationBlocked","getAxisMotionValue","percent","measuredAxis","layoutBox","postRender","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","stop","getAnimationState","play","getTransformPagePoint","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","startAxisValueAnimation","pause","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","sourceLength","targetLength","progress","clamp","calcOrigin","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","read","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","correctors","isCSSVariable","addScaleCorrector","defaultScaleCorrectors","group","didUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","compareByDepth","depth","FlatTree","isDirty","addUniqueItem","removeItem","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","noop","easing","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","round","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","transformAxes","hiddenVisibility","visibility","resetDistortingTransform","sharedAnimationValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","MotionCancelOptimisedAnimation","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","SubscriptionManager","notifyListeners","subscriptionManager","hasListeners","isSVGElement","isSVGSVGElement","cancelDelay","resizeUnblockUpdate","timeout","now","checkElapsed","setup","finishAnimation","registerSharedNode","hasRelativeLayoutChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","animationOptions","onPlay","setAnimationOrigin","clear","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","frameSteps","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measuredBox","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","motionValue$1","animateSingleValue","onStop","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","xLength","yLength","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","rotateZ","resetValues","getProjectionStyles","styles","pointerEvents","emptyStyles","valuesToRender","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","buildProjectionTransform","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","string","navigator","userAgent","roundPoint","maxDistance","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","handleHoverEvent","lifecycle","handlePressEvent","HTMLButtonElement","disabled","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","gestureAnimations","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","prevViewport","hasViewportOptionChanged","press","_element","endEvent","success","useGlobalTarget","globalTapTarget","onFocus","isFocusVisible","matches","e","onBlur","prefersReducedMotion","hasReducedMotionListener","visualElementStore","propEventHandlers","VisualElement","_props","_prevProps","_visualElement","KeyframeResolver","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderScheduledAt","baseTarget","initialValues","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","initPrefersReducedMotion","feature","valueIsTransform","onBindTransform","removeOnChange","on","latestValue","removeOnRenderRequest","removeSyncCheck","MotionCheckAppearSync","owner","other","sortInstanceNodePosition","featureDefinition","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","listener","nextValue","prevValue","existingValue","jump","hasAnimated","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getVariant","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","defaultValue","readValue","getBaseTargetFromProps","readValueFromInstance","isNumericalString","isZeroValueString","findValueType","getAnimatableNone","setBaseTarget","valueFromInitial","DOMVisualElement","DOMKeyframesResolver","compareDocumentPosition","childSubscription","textContent","renderHTML","setProperty","HTMLVisualElement","defaultTransformValue","readTransformValue","computedStyle","getPropertyValue","camelCaseAttributes","SVGVisualElement","defaultType","getDefaultValueType","getAttribute","_styleProp","setAttribute","renderSVG","tagName","motion"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]}