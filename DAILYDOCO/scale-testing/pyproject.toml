[project]
name = "dailydoco-scale-testing"
version = "1.0.0"
description = "Comprehensive scale testing infrastructure for DailyDoco Pro - validating 10M videos/month capacity"
authors = [
    {name = "DailyDoco Pro Team", email = "dev@dailydoco.pro"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Core testing framework
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    
    # Performance testing
    "locust>=2.20.0",
    "psutil>=5.9.0",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiohttp>=3.9.0",
    "asyncpg>=0.29.0",
    "redis[hiredis]>=5.0.0",
    
    # Data processing and analysis
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    
    # Database testing
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.0",
    "neo4j>=5.15.0",
    
    # Kubernetes and infrastructure
    "kubernetes>=28.1.0",
    "docker>=6.1.0",
    "paramiko>=3.4.0",
    
    # Monitoring and metrics
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
    "influxdb-client>=1.40.0",
    
    # Cloud providers
    "boto3>=1.34.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
    
    # Video processing simulation
    "ffmpeg-python>=0.2.0",
    "opencv-python>=4.9.0",
    "pillow>=10.2.0",
    
    # HTTP and API testing
    "httpx>=0.26.0",
    "requests>=2.31.0",
    "websockets>=12.0",
    
    # Configuration and utilities
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "loguru>=0.7.2",
    
    # YouTube API
    "google-api-python-client>=2.112.0",
    "google-auth-oauthlib>=1.2.0",
    
    # Machine learning for predictive analysis
    "scikit-learn>=1.4.0",
    "torch>=2.1.0",
    "transformers>=4.36.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

gpu = [
    "cupy-cuda12x>=12.3.0",
    "nvidia-ml-py>=12.535.77",
    "torch[cuda]>=2.1.0",
]

visualization = [
    "streamlit>=1.29.0",
    "dash>=2.16.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "performance/tests",
    "scalability/tests",
    "cost-analysis/tests",
    "reliability/tests",
    "youtube-api/tests",
    "simulation/tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
    "stress: marks tests as stress tests",
    "benchmark: marks tests as benchmarks",
]

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
target-version = ['py312']
line-length = 88